module m_vreman
!  Vreman (2004) subgridscale turbulence model
contains

subroutine vreman(f, tau, eddyvisc ,Bbeta ,alphamag ,alpha ,beta)
   use mod_dimensions
   use mod_D3Q27setup
   use m_readinfile, only : ivreman,kinevisc,p2l,smagorinsky,tauin
   use m_wtime
   implicit none
   real, intent(in)      :: f(nl,0:nx+1,0:ny+1,0:nz+1) ! Nonequilibrium f as input
   real, intent(out)     :: tau(nx,ny,nz)              ! Tau including subgrid scale mixing
#ifdef _CUDA
   attributes(device) :: f
   attributes(device) :: tau
#endif

   real          :: dx              ! length scale lattice to physical
   real          :: const           ! c in Vreman 2004 Eq (5)


   integer :: i, j, k, l, m, p, q

   real, intent(out) :: eddyvisc(nx,ny,nz)  ! nu in Vreman 2004 Eq (5)
   real, intent(out) :: Bbeta(nx,ny,nz)     ! B_beta in Vreman 2004 Eq (5)
   real, intent(out) :: alphamag(nx,ny,nz)
   real, intent(out) :: alpha(3,3,nx,ny,nz)
   real, intent(out) :: beta(3,3,nx,ny,nz)
#ifdef _CUDA
   attributes(device) :: alpha
   attributes(device) :: beta
   attributes(device) :: eddyvisc
   attributes(device) :: Bbeta
   attributes(device) :: alphamag
#endif

   integer, parameter :: icpu=13
   call cpustart()

   if (ivreman /= 1) then
#ifdef _CUDA
!$cuf kernel do(3) <<<*,*>>> 
#else
!$OMP PARALLEL DO DEFAULT(NONE) PRIVATE(i, j, k) SHARED(tau, kinevisc)
#endif
      do k=1,nz
         do j=1,ny
            do i=1,nx
               tau(i,j,k) = 3.0*kinevisc + 0.5
            enddo
         enddo
      enddo
#ifndef _CUDA
!$OMP END PARALLEL DO
#endif
      return
   endif

   print *,'a'

   const=2.5*smagorinsky**2
   dx=p2l%length

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Loop over grid
#ifdef _CUDA
!$cuf kernel do(3) <<<*,*>>>
#else
!$OMP PARALLEL DO DEFAULT(NONE) PRIVATE(i, j, k, l, p, q) &
!$OMP&              SHARED(f, tau, weights, H2, tauin, kinevisc, const, eddyvisc, Bbeta, alpha, beta, alphamag)
#endif
   do k=1,nz
      do j=1,ny
         do i=1,nx

! Eq (11) from Jacob 2018 is identical to the 33a from Feng (2021)
            alpha(:,:,i,j,k)=0.0
            do l=1,nl
               do q=1,3
               do p=1,3
                  alpha(p,q,i,j,k) = alpha(p,q,i,j,k) + H2(p,q,l)*f(l,i,j,k)
               enddo
               enddo
            enddo
!! alphamag
            alphamag(i,j,k)=0.00001
            do q=1,3
            do p=1,3
               alphamag(i,j,k)=alphamag(i,j,k)+alpha(p,q,i,j,k)*alpha(p,q,i,j,k)
            enddo
            enddo
!
!! beta = del^2 * alpha' * alpha
            beta(:,:,i,j,k)=0.00001
            do q=1,3
            do p=1,3
               do m=1,3
                  beta(p,q,i,j,k)=beta(p,q,i,j,k)+alpha(m,p,i,j,k)*alpha(m,q,i,j,k)
               enddo
            enddo
            enddo
!
!! Vreman 2004 Eq (8)
            Bbeta(i,j,k)=beta(1,1,i,j,k)*beta(2,2,i,j,k) - beta(1,2,i,j,k)**2  &
                 +beta(1,1,i,j,k)*beta(3,3,i,j,k) - beta(1,3,i,j,k)**2  &
                 +beta(2,2,i,j,k)*beta(3,3,i,j,k) - beta(2,3,i,j,k)**2

!! Vreman 2004 Eq (5)
            eddyvisc(i,j,k)=const*sqrt(Bbeta(i,j,k)/alphamag(i,j,k))

            tau(i,j,k) = 3.0*(kinevisc + eddyvisc(i,j,k)) + 0.5

         enddo
      enddo
   enddo
#ifndef _CUDA
!$OMP END PARALLEL DO
#endif

   call cpufinish(icpu)

end subroutine
end module

