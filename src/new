!--- compute tmpeq (equilibrium) but do NOT write feq yet ---
do l = 1, nl
   cu = real(cxs(l))*vel(1) + real(cys(l))*vel(2) + real(czs(l))*vel(3)
   tmpeq(l) = dens * (1.0 + cu*inv1cs2)

   do q = 1, 3
   do p = 1, 3
      tmpeq(l) = tmpeq(l) + H2(p,q,l)*A0_2(p,q)
   end do
   end do

   if (ibgk == 3 .and. l > 1) then
      do r = 1,3
      do q = 1,3
      do p = 1,3
         tmpeq(l) = tmpeq(l) + H3(p,q,r,l)*A0_3(p,q,r)
      end do
      end do
      end do
   end if

   tmpeq(l) = weights(l) * tmpeq(l)
   ! <-- DO NOT store to feq here
end do


!---------------------------
! Regularization (compute f_new)
!---------------------------
if (ihrr == 1) then
   a1_2(:,:) = 0.0
   do l = 1, nl
      tmpneq(l) = f_old(l) - tmpeq(l)        ! use f_old not global f
      do q = 1, 3
      do p = 1, 3
         a1_2(p,q) = a1_2(p,q) + H2(p,q,l) * tmpneq(l)
      end do
      end do
   end do

   ! compute a1_3 using Maspalinas (as before) and scale a1_2,a1_3...
   do r = 1,3
   do q = 1,3
   do p = 1,3
      a1_3(p,q,r) = vel(p)*a1_2(q,r) + vel(q)*a1_2(r,p) + vel(r)*a1_2(p,q)
   end do
   end do
   end do

   do q = 1,3
   do p = 1,3
      a1_2(p,q) = a1_2(p,q) * inv2cs4
   end do
   end do

   do r = 1,3
   do q = 1,3
   do p = 1,3
      a1_3(p,q,r) = a1_3(p,q,r) * inv6cs6
   end do
   end do
   end do

   ! compute fneq into f_new
   do l = 1, nl
      f_new(l) = 0.0
      do q = 1,3
      do p = 1,3
         f_new(l) = f_new(l) + H2(p,q,l) * a1_2(p,q)
      end do
      end do
      do r = 1,3
      do q = 1,3
      do p = 1,3
         f_new(l) = f_new(l) + H3(p,q,r,l) * a1_3(p,q,r)
      end do
      end do
      end do

      f_new(l) = weights(l) * f_new(l)
   end do

else
   ! simple BGK difference-based fneq
   do l = 1, nl
      f_new(l) = f_old(l) - tmpeq(l)
   end do
end if

!---------------------------
! Vreman (alpha calculation) â€” use f_new (the current fneq) not global f
!---------------------------
if (ivreman == 1) then
   alpha(:,:) = 0.0
   do l = 1, nl
      tautmp = f_new(l)
      do q = 1,3
      do p = 1,3
         alpha(p,q) = alpha(p,q) + H2(p,q,l) * tautmp
      end do
      end do
   end do

   alphamag = 1.0e-5
   do q = 1,3
   do p = 1,3
      alphamag = alphamag + alpha(p,q)*alpha(p,q)
   end do
   end do

   do q = 1,3
   do p = 1,3
      beta(p,q) = 1.0e-5
      do m = 1,3
         beta(p,q) = beta(p,q) + alpha(m,p) * alpha(m,q)
      end do
   end do
   end do

   Bbeta = beta(1,1)*beta(2,2) - beta(1,2)**2 &
         + beta(1,1)*beta(3,3) - beta(1,3)**2 &
         + beta(2,2)*beta(3,3) - beta(2,3)**2

   tautmp = Bbeta / alphamag
   if (tautmp > eps) then
      eddyvisc = const * sqrt(tautmp)
   else
      eddyvisc = 0.0
   end if
   tau(i,j,k) = 3.0*(kinevisc + eddyvisc) + 0.5
end if

!---------------------------
! finalize: compute fac and write back f and feq once
! feq_final = tmpeq + fac * f_new
!---------------------------
fac = 1.0 - 1.0 / tau(i,j,k)

do l = 1, nl
   f(l,i,j,k)    = f_new(l)                 ! single write to global f
   feq(l,i,j,k)  = tmpeq(l) + fac * f_new(l) ! single write to global feq
end do

